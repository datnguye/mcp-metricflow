[project]
name = "mcp-metricflow"
dynamic = ["version"]
description = "A Model Context Protocol (MCP) server that provides MetricFlow CLI tools"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
dependencies = [
    "fastapi>=0.115.12",
    "uvicorn>=0.34.2",
    "dbt-metricflow>=0.8.2",
    "python-dotenv>=1.1.0",
    "mcp>=1.3.2",
]

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "ruff>=0.11.0,<=0.11.10",
    "bandit>=1.8.3",
    "pre-commit>=4.2.0",
    "poethepoet>=0.34.0",
    "dbt-snowflake>=1.8.0",
]

[build-system]
requires = ["pdm-backend>=2.3.3", "setuptools-scm>=8.3.1"]
build-backend = "pdm.backend"

[tool.pdm]
version = {source = "scm"}
package = false

[tool.ruff]
line-length = 120
target-version = "py310"
extend-exclude = ["tests/*"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "D",    # pydocstyle
    "N",    # flake8-naming
    "ANN",  # flake8-annotations (type hints)
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # ruff-specific rules
    "PYI",  # flake8-pyi
    "NPY",  # NumPy-specific rules
    "PT",   # flake8-pytest-style
    # "TRY",  # flake8-try-except-raise
    "PLR",  # pylint refactor
    "PLW",  # pylint warnings
    "PGH",  # pygrep hooks
    "PL",   # pylint
    "FLY",  # flynt
    "ARG",  # flake8-unused-arguments
    "TD",   # flake8-todos
    "ERA",  # eradicate
]
ignore = [
    "PLR0913", # too many arguments in function definition
    "PLR2004", # magic values
    "ANN204", # Missing return type annotation for special method `__init__`
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `call_tool`
    "PLR0911", # Too many return statements (7 > 6)
    "ANN002", "ANN003", "ARG004", # For`*args`, `**kwargs`
    "ERA001", # Found commented-out code # TO DO: remove this exclude later
]
unfixable = ["B"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["mcp-metricflow"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.poe.tasks]
# Setup tasks
setup = "uv sync --all-extras"
setup-hooks = "pre-commit install"

# Code quality tasks
format = "uv run ruff format mcp-metricflow"
lint = "uv run ruff check mcp-metricflow"
